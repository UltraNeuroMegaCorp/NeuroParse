name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    outputs:
      bot-image: ${{ steps.bot.outputs.image }}
      model-image: ${{ steps.model.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push bot image
        id: bot
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/bot:latest ./bot
          docker push ${{ secrets.DOCKER_USERNAME }}/bot:latest
          echo "::set-output name=image::${{ secrets.DOCKER_USERNAME }}/bot:latest"

      - name: Build and push model-api image
        id: model
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/model-api:latest ./model_api
          docker push ${{ secrets.DOCKER_USERNAME }}/model-api:latest
          echo "::set-output name=image::${{ secrets.DOCKER_USERNAME }}/model-api:latest"

  copy-compose:
    name: Copy docker-compose.yml to VM
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.HOST_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy docker-compose.yml
        run: |
          scp -o StrictHostKeyChecking=no \
              -i ~/.ssh/id_rsa \
              ./docker-compose.yml \
              ${{ secrets.HOST_USER }}@${{ secrets.HOST_IP }}:/home/${{ secrets.HOST_USER }}/

  create-env:
    name: Create .env on VM
    runs-on: ubuntu-latest
    needs: copy-compose
    steps:
      - name: SSH to VM and create .env
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          script: |
            cd /home/${{ secrets.HOST_USER }}
            echo "BOT_TOKEN=${{ secrets.BOT_TOKEN }}" > .env
            echo "MESSAGE_DB_PATH=${{ vars.MESSAGE_DB_PATH }}" >> .env
            echo "LISTENER_DB_PATH=${{ vars.LISTENER_DB_PATH }}" >> .env
            echo "CONTROL_CHAT_ID=${{ secrets.CONTROL_CHAT_ID }}" >> .env
            echo "TARGET_CHAT_ID=${{ secrets.TARGET_CHAT_ID }}" >> .env
            echo "MODEL_API_URL=${{ vars.MODEL_API_URL }}" >> .env
            chown ${{ secrets.HOST_USER }}:${{ secrets.HOST_USER }} .env
            chmod 600 .env

  deploy:
    name: Deploy Containers
    runs-on: ubuntu-latest
    needs: create-env
    steps:
      - name: SSH Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USER }}
          key: ${{ secrets.HOST_SSH_KEY }}
          script: |
            cd /home/${{ secrets.HOST_USER }}
            echo "Проверка файлов в директории..."
            ls -la
            echo "Pulling images..."
            sudo docker-compose --env-file .env pull
            
            echo "Stopping old containers..."
            sudo docker-compose --env-file .env down
            
            echo "Starting containers..."
            sudo docker-compose --env-file .env up -d --remove-orphans

            echo "Deleting .env..."
            sudo rm -rf .env
